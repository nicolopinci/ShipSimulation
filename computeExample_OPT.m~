% Script to run the simulation with predefined parameters

% Plot trajectory
omega = rpmToHz(100); % Initial omega = 100 rpm (= 100/60 Hz)

X0 = [0 0 0 0 0 0]'; % Initial state

M = [11 0 0; 0 11 8.4; 0 8.4 5800] * 10^6; % mass matrix
D = [3 0 0; 0 5.5 6.4; 0 6.4 1200] * 10^5; % linear damping matrix

dt = 0.1; % timestep
timespan = 0:dt:1000; % simulation interval [s]

invM = inv(M); % inverse of the linear damping matrix (calculated before to reduce computational complexity later)

syms control_signal(t)
control_signal = 30*sin(0.06*t); % rudder movement

control_function = matlabFunction(control_signal);

accuracy = 0.006;

rudderArray = [-45, -40, -30, -20, -10, 0, 10, 20, 30, 40, 45];
liftArray = [-0.46, -0.48, -0.46, -0.38, -0.2, 0, 0.2, 0.38, 0.46, 0.48, 0.46];
dragArray = [0.78, 0.68, 0.48, 0.22, 0.08, 0.02, 0.08, 0.22, 0.48, 0.68, 0.78];


[fL, fD] = findCoefficient(rudderArray, liftArray, dragArray, 0);
[fLl, fDl] = findCoefficient(rudderArray, liftArray, dragArray, accuracy/2);
[fLh, fDh] = findCoefficient(rudderArray, liftArray, dragArray, -accuracy/2);

[time, solution] = ode45(@(t, X) systemODE_OPT(t, X, invM, D, omega, control_function, 1, true, fL, fD), timespan, X0); 
solution = solution';

[timeL, solutionL] = ode45(@(t, X) systemODE_OPT(t, X, invM, D, omega, control_function, 1, true, fLl, fDl), timespan, X0); 
solutionL = solutionL';

[timeH, solutionH] = ode45(@(t, X) systemODE_OPT(t, X, invM, D, omega, control_function, 1, true, fLh, fDh), timespan, X0); 
solutionH = solutionH';

% PID parameters
Kp = 10;
Ki = 0.05;
Kd = 0.0001;

desiredAngle = pi/6; % desired heading angle; 30 degrees --> pi/6 rad

solutionPID = RungeKuttaPID(Kp,Ki, Kd, desiredAngle, timespan, X0, invM, D, omega, control_function, fL, fD, dt);
solutionPIDhigh = RungeKuttaPID(Kp,Ki, Kd, desiredAngle, timespan, X0, invM, D, omega, control_function, fLh, fDh, dt);
solutionPIDlow = RungeKuttaPID(Kp,Ki, Kd, desiredAngle, timespan, X0, invM, D, omega, control_function, fLl, fDl, dt);

visualizeResults(rudderArray, fLl, fLh, fL, fDl, fDh, fD, solutionL, solutionH, solution, solutionPIDlow, solutionPIDhigh, solutionPID, desiredAngle, timeL, timeH, time);

